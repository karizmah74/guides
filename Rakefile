# Deploy with new API:
# - rake preview
# - visit http://0.0.0.0:4567 and verify everything was generated correctly
# - ensure data/api.yml has the correct sha/tag, if not just simply update it and use middleman to re-preview

# Deploy without updating the API:
# - middleman
# - visit http://0.0.0.0:4567 and verify everything was generated correctly
# - rake deploy

require "bundler/setup"
require 'yaml'
require './lib/meetups_data'

def git_initialize(repository)
  unless File.exist?(".git")
    system "git init"
    system "git remote add origin git@github.com:emberjs/#{repository}.git"
  end
end

def git_update
  system "git fetch origin"
  system "git reset --hard origin/master"
  # Remove all files so we don't accidentally keep old stuff
  # These will be regenerated by the build process
  system "rm `git ls-files`"
end

def build
  system "middleman build"
end


desc "Build the website"
task :build do
  build
end

desc "Preview"
task :preview do
  require 'listen'

  paths = Dir.glob(File.join(ember_path, "packages/*/lib")) +
    Dir.glob(File.join(ember_data_path, "packages/*/lib"))

  listener = Listen.to(*paths, :only => /\.js$/) do
    Rake::Task["generate_docs"].execute
  end
  listener.start

  trap :SIGINT do
    exit 0
  end

  system "middleman server --reload-paths data/"
end

desc "Deploy the website to github pages"
task :deploy do |t, args|
  require "highline/import"
  message = ask("Provide a deployment message:  ") do |q|
    q.validate = /\w/
    q.responses[:not_valid] = "Can't be empty."
  end

  mkdir_p "build"
  Dir.chdir "build" do
    git_initialize("emberjs.github.com")
    git_update

    unless build
      puts "The build failed, stopping deploy. Please fix build errors before re-deploying."
      exit 1
    end

    # This screws up the build and isn't necessary
    # rm_r "source/examples"

    File.open("CNAME", 'w') do |f|
      f.write "emberjs.com"
    end

    system "git add -A"
    system "git commit -m '#{message.gsub("'", "\\'")}'"
    system "git push origin master" unless ENV['NODEPLOY']
  end
end

desc "Find coordinates for meetup locations"
task :geocode do
  geocode_meetups
end

desc "Find organizers for meetup user group_urlname"
task :findorganizers do |t, args|
  find_meetup_organizers(ENV['force'])
end
